import json
import re
from typing import Any, Dict, List, Tuple, Optional

def parse_dot_architecture(
    dot_code: str,
    metadata: Optional[Dict[str, Any]] = None
) -> Tuple[List[Dict[str, Any]], List[Dict[str, Any]]]:
    """
    Parse DOT architecture diagram
    
    :param dot_code: Graphviz DOT code
    :param metadata: Component metadata
    :return: (components, connections)
    """
    components = []
    connections = []
    metadata = metadata or {}
    
    # Extract components
    node_pattern = r'(\w+)\s*\[label="([^"]+)"'
    for match in re.finditer(node_pattern, dot_code):
        comp_id = match.group(1)
        comp_name = match.group(2)
        components.append({
            "id": comp_id,
            "name": comp_name,
            **metadata.get(comp_id, {})
        })
    
    # Extract connections
    edge_pattern = r'(\w+)\s*->\s*(\w+)(\s*\[label="([^"]+)"\])?'
    for match in re.finditer(edge_pattern, dot_code):
        source = match.group(1)
        target = match.group(2)
        transformer = match.group(4) if match.group(4) else None
        
        connections.append({
            "source": source,
            "target": target,
            "transformer": transformer
        })
    
    return components, connections

def generate_code_skeleton(
    components: List[Dict[str, Any]],
    connections: List[Dict[str, Any]]
) -> str:
    """
    Generate Python code skeleton from architecture
    
    :param components: List of component dicts
    :param connections: List of connection dicts
    :return: Python code string
    """
    code = ["# Auto-generated by ArxViz", "from arxglue import connect, Component"]
    
    # Component definitions
    code.append("\n# Component definitions")
    for comp in components:
        comp_name = comp["name"].replace(" ", "_")
        if comp.get("type") == "class":
            code.append(f"\nclass {comp_name}(Component):")
            code.append("    def __call__(self, data):")
            code.append("        # Implement your logic here")
            code.append("        return data")
        else:
            code.append(f"\ndef {comp_name}(data):")
            code.append("    # Implement your logic here")
            code.append("    return data")
    
    # Connections
    code.append("\n# Architecture connections")
    for conn in connections:
        source = next((c["name"].replace(" ", "_") for c in components if c["id"] == conn["source"]), conn["source"])
        target = next((c["name"].replace(" ", "_") for c in components if c["id"] == conn["target"]), conn["target"])
        
        # Обработка трансформера
        transformer = ""
        if conn.get("transformer"):
            # Если трансформер уже определен как компонент
            if any(c["name"].replace(" ", "_") == conn["transformer"] for c in components):
                transformer = f", transformer={conn['transformer']}"
            else:
                # Добавляем новый трансформер как функцию
                code.append(f"\ndef {conn['transformer']}(data):")
                code.append("    # Implement transformation logic here")
                code.append("    return data")
                transformer = f", transformer={conn['transformer']}"
        
        code.append(f"connect({source}, {target}{transformer})")
    
    return "\n".join(code)
